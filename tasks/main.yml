---
- name: Install dependencies
  sudo: yes
  apt: pkg={{ item }} state=present
  with_items:
    - git
    - curl
    - build-essential
    - libssl-dev
  tags: nvm

- name: Check for nvm
  remote_user: "{{ nvm.user }}"
  stat: path=~{{ nvm.user }}/.nvm
  register: nvm_path

- name: Install nvm
  remote_user: "{{ nvm.user }}"
  git: repo=https://github.com/creationix/nvm.git dest=~{{ nvm.user }}/.nvm version={{ nvm.version }}
  tags: nvm
  when: not nvm_path.stat.exists

- name: Source nvm
  remote_user: "{{ nvm.user }}"
  lineinfile: >
    dest={{ nvm.profile_file }}
    line="source ~{{ nvm.user }}/.nvm/nvm.sh"
  tags: nvm

- name: Install node
  remote_user: "{{ nvm.user }}"
  shell: . ~{{ nvm.user }}/.nvm/nvm.sh && nvm install {{ nvm.node_version }} executable=/bin/{{nvm.shell}}
  tags: nvm

- name: Set default node version to installed node
  remote_user: "{{ nvm.user }}"
  shell: . ~{{ nvm.user }}/.nvm/nvm.sh && nvm alias default {{ nvm.node_version }} executable=/bin/{{nvm.shell}}
  tags: nvm

- name: Search npm binary
  remote_user: "{{ nvm.user }}"
  shell: . ~{{ nvm.user }}/.nvm/nvm.sh && which npm executable=/bin/{{nvm.shell}}
  register: npm_executable
  ignore_errors: yes
  changed_when: false

- name: Install general package
  remote_user: "{{ nvm.user }}"
  npm: name={{ item }} global=yes executable={{ npm_executable.stdout }}
  with_items: nvm.packages
